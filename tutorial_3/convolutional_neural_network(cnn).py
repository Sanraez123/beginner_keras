# -*- coding: utf-8 -*-
"""Convolutional_Neural_Network(CNN).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EHd_xawG34E-WS4lBgv40fAnlcdmuc8S
"""

import tensorflow.keras as tk
mnist = tk.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

import matplotlib.pyplot as plt
plt.imshow(x_train[1000])
plt.show()

print(y_train[1000])

print(x_train[100].shape)
x_train = x_train.reshape(x_train.shape[0], 28, 28)
print(x_train[1643].shape)
x_test = x_test.reshape(x_test.shape[0], 28, 28)

input_shape = (28, 28, 1)

x_train = x_train.astype('float32')
x_train /= 255

x_test = x_test.astype('float32')
x_test /= 255

print (y_train[0])
y_train = tk.utils.to_categorical(y_train, 10)
y_test = tk.utils.to_categorical(y_test, 10)

print (y_train[0])

model = tk.models.Sequential()
model.add(tk.layers.Conv2D(32, kernel_size=(3,3), activation = 'relu', input_shape=input_shape))
model.add(tk.layers.Conv2D(64, kernel_size=(3,3), activation = 'relu'))
model.add(tk.layers.MaxPooling2D(pool_size=(2,2)))
model.add(tk.layers.Dropout(0.25))
model.add(tk.layers.Flatten())
model.add(tk.layers.Dense(128, activation='relu'))
model.add(tk.layers.Dropout(0.5))
model.add(tk.layers.Dense(10, activation='softmax'))

model.compile(loss=tk.losses.categorical_crossentropy, optimizer=tk.optimizers.Adadelta(), metrics=['accuracy'])
model.fit(x_train, y_train, batch_size=128, epochs=20, validation_data=(x_test, y_test))

model.evaluate(x_test, y_test)

