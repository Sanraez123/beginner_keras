{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMwbosAvmrqyVzxv9Vw6gHA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":23,"metadata":{"id":"LJoqyeAIv9II","executionInfo":{"status":"ok","timestamp":1663660484841,"user_tz":-480,"elapsed":525,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}}},"outputs":[],"source":["import tensorflow.keras as tk\n","import numpy as np\n","import random"]},{"cell_type":"code","source":["import io\n","path = tk.utils.get_file('nietzsche.txt', origin='https://s3.amazonaws.com/text-datasets/nietzsche.txt')\n","\n","with io.open(path, encoding='utf-8') as f:\n","  text = f.read().lower()\n","\n","print(len(text))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oRU1_4bxxKcw","executionInfo":{"status":"ok","timestamp":1663660486519,"user_tz":-480,"elapsed":2,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}},"outputId":"9c5a923d-c9a1-4382-dc72-7a242cd18af1"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["600893\n"]}]},{"cell_type":"code","source":["chars = sorted(list(set(text)))\n","print(len(set(text)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gm6Psibyx033","executionInfo":{"status":"ok","timestamp":1663660488956,"user_tz":-480,"elapsed":365,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}},"outputId":"a2fad101-fccf-48e3-fa50-4d9249cd3a0b"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["57\n"]}]},{"cell_type":"code","source":["char_indices = dict((c, i) for i, c in enumerate(chars))\n","indices_char = dict((i, c) for i, c in enumerate(chars))"],"metadata":{"id":"352mSsRj0ifO","executionInfo":{"status":"ok","timestamp":1663660115669,"user_tz":-480,"elapsed":522,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["sentences = []\n","next_chars = []\n","\n","for i in range(0, len(text) - 40, 3):\n","  sentences.append(text[i: i+40])\n","  next_chars.append(text[i+40])\n","\n","x = np.zeros((len(sentences), 40, len(chars)), dtype=np.bool)\n","y = np.zeros((len(sentences), len(chars)), dtype=np.bool)\n","\n","for i, sentence in enumerate(sentences):\n","  for t, char in enumerate(sentence):\n","    x[i, t, char_indices[char]] = 1\n","  y[i, char_indices[next_chars[i]]] = 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bJbfuJ6F1FB-","executionInfo":{"status":"ok","timestamp":1663660706819,"user_tz":-480,"elapsed":3755,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}},"outputId":"8d4fb0af-677f-44b9-c9e2-f1b86acdf574"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:9: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","  if __name__ == '__main__':\n"]}]},{"cell_type":"code","source":["model = tk.models.Sequential()\n","model.add(tk.layers.LSTM(128, input_shape=(40, len(chars))))\n","model.add(tk.layers.Dense(len(chars), activation = 'softmax'))\n","model.compile(loss='categorical_crossentropy', optimizer=tk.optimizers.RMSprop(lr=0.01))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pdRBaqF42h6q","executionInfo":{"status":"ok","timestamp":1663660948690,"user_tz":-480,"elapsed":567,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}},"outputId":"5d0036f2-826d-40a9-9f87-92f4862e73d2"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/rmsprop.py:130: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(RMSprop, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","source":["def sample(preds, temperature=1.0):\n","  preds = np.asarray(preds).astype('float64')\n","  preds = np.log(preds) / temperature\n","  exp_preds = np.exp(preds)\n","  preds = exp_preds / np.sum(exp_preds)\n","  probas = np.random.multinomial(1, preds, 1)\n","  return np.argmax(probas)"],"metadata":{"id":"VEaSvqoJ6y2D","executionInfo":{"status":"ok","timestamp":1663661147400,"user_tz":-480,"elapsed":328,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["model.fit(x, y, batch_size=18, epochs = 1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Eel8QzSS7oEc","executionInfo":{"status":"ok","timestamp":1663662511642,"user_tz":-480,"elapsed":442384,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}},"outputId":"c1b2d844-5f38-42e1-d487-a7d1c7026b88"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["11127/11127 [==============================] - 420s 38ms/step - loss: 1.7922\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb838633810>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["start_index = random.randint(0, len(text) - 40 - 1)\n","for diversity in [0.2, 0.5, 1.0, 1.2]:\n","  generated = ''\n","  sentence = text[start_index: start_index+40]\n","  generated += sentence\n","\n","  for i in range(600):\n","    x_pred = np.zeros((1, 40, len(chars)))\n","    for t, char in enumerate(sentence):\n","      x_pred[0, t, char_indices[char]] = 1\n","    \n","    preds = model.predict(x_pred, verbose=0)[0]\n","    next_index = sample(preds, diversity)\n","    next_char = indices_char[next_index]\n","    generated += next_char\n","    sentence = sentence[1:] + next_char\n","with open('example.txt', 'w') as f:\n","  f.write(generated)"],"metadata":{"id":"6ue3c_zf_KYr","executionInfo":{"status":"ok","timestamp":1663662741417,"user_tz":-480,"elapsed":125323,"user":{"displayName":"Oscar Wong","userId":"00761182590921487654"}}},"execution_count":33,"outputs":[]}]}